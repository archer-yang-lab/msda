setwd('/Users/emeryyi/Desktop')
library(msda)#
## generate data#
n <- 100#
p <- 1000#
s <- 3#
K <- 3#
#
prior <- rep(1/K, K)#
#
rho <- 0.5#
sigma <- matrix(rho, p, p)#
diag(sigma) <- 1#
sigma.eigen <- eigen(sigma)#
sigma.sqrt <- sigma.eigen$vectors %*% diag(sqrt(sigma.eigen$values)) %*% t(sigma.eigen$vectors)#
#
beta <- matrix(0, p, K)#
for (i in 1:K) {#
    beta[1:s, i] <- i#
}#
mu <- sigma %*% beta#
#
set.seed(1)#
y <- runif(n)#
prior.cum <- cumsum(prior)#
for (i in 1:n) {#
    y[i] <- sum(y[i] < prior.cum)#
}#
#
set.seed(1)#
x <- matrix(rnorm(n * p), n, p)#
x <- x %*% sigma.sqrt#
for (i in 1:K) {#
    x[y == i, ] <- sweep(x[y == i, ], 2, mu[, i], "+")#
}#
# msda.prep(x,y)#
pf <- rep(1, p)
nfolds = 5
lambda.opt = "min"
y <- drop(y)#
    n <- NROW(x)#
    p <- NCOL(x)#
    K<-length(unique(y))#
    prior<-rep(0,K)#
    for(i in 1:K){prior[i]<-mean(y==i)}#
    ### Fit the model once to get dimensions etc of output#
    tmp <- msda(x, y, lambda = lambda, ...)#
    lambda <- tmp$lambda#
    nlambda <- length(lambda)#
    ### Now fit the nfold models and store them
tmp <- msda(x, y, lambda = lambda)
tmp <- msda(x, y, lambda = NULL)
lambda <- tmp$lambda
nlambda <- length(lambda)
foldid <- sample(rep(seq(nfolds), length = n))
nlams=double(nfolds)	#
    residmat=matrix(NA,nfolds,length(lambda))#
    good <- matrix(0, nfolds, length(lambda))
i=5
which <- foldid == i#
        fitobj <- msda(x[!which, , drop = FALSE], y[!which], lambda = lambda)#
      	preds <- predict(fitobj,x[which,,drop=FALSE])#
       	nlami <- length(fitobj$lambda)#
        residmat[i,seq(nlami)] <- colMeans(y[which] != preds)#
        good[i, seq(nlami)] <- 1
obj = fitobj
theta<-obj$theta
mu<-obj$mu#
  prior<-obj$prior#
  mubar <- sweep(mu[, -1], 1, mu[, 1], "+")/2#
  n <- nrow(x)#
  p<-ncol(x)#
  x.train<-obj$x#
  y.train<-obj$y#
  nclass <- length(prior)#
  nlambda <- length(theta)
pred<-matrix(0,n,nlambda)#
  pred[1]<-which.max(prior)
nz<-sum(theta[[i]][,1]!=0)
if(nz==0){pred[i]<-which.max(prior)}else{#
      xfit<-x.train%*%theta[[i]][,1:(min(nclass-1,nz))]
pred[,i]<-predict(l,x%*%theta[[i]][,1:(min(nclass-1,nz))])$class}
for(i in 1:nlambda){#
    nz<-sum(theta[[i]][,1]!=0)#
    if(nz==0){pred[i]<-which.max(prior)}else{#
      xfit<-x.train%*%theta[[i]][,1:(min(nclass-1,nz))]#
      l<-lda(xfit,y.train)#
      pred[,i]<-predict(l,x%*%theta[[i]][,1:(min(nclass-1,nz))])$class}#
  }
for(i in 1:nlambda){#
    nz<-sum(theta[[i]][,1]!=0)#
    if(nz==0){pred[i]<-which.max(prior)}else{#
      xfit<-x.train%*%theta[[i]][,1:(min(nclass-1,nz))]#
      l<-lda(xfit,y.train)#
      print(1)#
      pred[,i]<-predict(l,x%*%theta[[i]][,1:(min(nclass-1,nz))])$class}#
  }
i=2
i=1
i=3
i=4
nz<-sum(theta[[i]][,1]!=0)#
    if(nz==0){pred[i]<-which.max(prior)}else{#
      xfit<-x.train%*%theta[[i]][,1:(min(nclass-1,nz))]#
      l<-lda(xfit,y.train)#
      print(1)#
      pred[,i]<-predict(l,x%*%theta[[i]][,1:(min(nclass-1,nz))])$class}
nclass
xfit<-x.train%*%theta[[i]][,1:(min(nclass-1,nz))]
xfix
theta[[i]]
1:(min(nclass-1,nz))
theta[[i]][,1:(min(nclass-1,nz))]
0.0166428 0.0335626
0.0166428 /0.0335626
0.2199217 /0.4439533
l<-lda(xfit,y.train)
xfit
xfit[,1]/xfit[,2]
setwd('/Users/emeryyi/Dropbox/Research/googleproject/msda/R')
nclass-1
nz
suppressuWarnings(l<-lda(xfit,y.train))
suppressWarnings(l<-lda(xfit,y.train))
l
